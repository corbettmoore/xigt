start = element tier {
    attribute id { Tier.id },
    BaseAttrs,
    Tier.refs,
    Tier.subtype
}
Tier.id = parent Tier.id
# There are three default ref types, but 'segmentation' cannot cooccur with
# 'alignment' and/or 'content'.
Tier.refs = ( attribute alignment { Tier.alnref }?,
              attribute content { Tier.cntref }?
            | attribute segmentation { Tier.segref }? )
Tier.alnref = parent Tier.alnref
Tier.cntref = parent Tier.cntref
Tier.segref = parent Tier.segref
# all other attributes, types of metadata and the type of content
# can be selected by the 'type' attribute. If an extension wants to
# block subtyping of tiers, it can redefine Tier.subtype
Tier.subtype = attribute type { Tier.type },
               Tier.attrs,
               Tier.metadata,
               Tier.content
Tier.type = notAllowed
Tier.attrs = parent Tier.attrs
Tier.metadata = (BasicMetadata | Metadata)*
Tier.content = ( Item | parent Tier.content )*

Item |= grammar { include "xigt-item.rnc" }

# Copy up Item definitions or establish Tier-relevant ones
Item.id = parent Item.id
Item.ref = parent Item.ref
Item.type = notAllowed
Item.attrs = parent Item.attrs
Item.content = parent Item.content

# keep these in scope
Id = parent Id
Ref = parent Ref
AlgnExpr = parent AlgnExpr
BaseAttrs = parent BaseAttrs
Metadata = parent Metadata
BasicMetadata = parent BasicMetadata
